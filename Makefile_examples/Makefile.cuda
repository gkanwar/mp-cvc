# ##########
work=../..
srcdir=..

# qlua_build_dir=$(work)/qlua/momproj/build-ubuntu18/
limedir=$(work)/lime-1.3.2/install/
# lemondir=$(work)/lemon/build-ubuntu18/
fftwdir=$(work)/fftw-2.1.5/install/
lapackdir=$(work)/lapack-3.11.0/
lhpcdir=$(work)/aff-3.0.0/install/
hdf5dir=$(work)/hdf5-1.14.1-2/install/
kqeddir=$(work)/KQED/install/
cudadir=/opt/cuda/

# -fopenmp
CXX=g++
CXXFLAGS= -Wall -g -O2 -DF_  -DCUBIC_GROUP_SINGLE_COVER -DDUMMY_SOLVER -DHAVE_KQED -DHAVE_HDF5 -DHAVE_LHPC_AFF -DHAVE_CUDA -DUSE_CUDA
NVCC=nvcc
NVCCFLAGS= -arch=sm_60
# -DHAVE_OPENMP
# -DCUBIC_GROUP_DOUBLE_COVER


CCDEP = g++
DEPFLAGS = -MM

INCLUDE = -I. -I$(srcdir) \
	-I$(fftwdir)/include/ -I$(limedir)/include/ \
	-I$(kqeddir)/include/ -I$(hdf5dir)/include/ \
	-I$(lhpcdir)/include/ -I$(cudadir)/include/

LIBS = -lm -L$(fftwdir)/lib/ -lfftw \
	-L$(limedir)/lib/ -llime \
	-L$(kqeddir)/lib/ -lKQED \
	-L$(hdf5dir)/lib/ -lhdf5 \
	-L$(lhpcdir)/lib/ -llhpc-aff \
	-L$(lapackdir) -llapack -lrefblas -lgfortran \
	-L$(cudadir)/lib/ -lcudart
# -lfftw_mpi -lblas 

LDFLAGS = -lm -L$(fftwdir)/lib/ -lfftw \
	-L$(limedir)/lib/ -llime \
	-L$(kqeddir)/lib/ -lKQED \
	-L$(hdf5dir)/lib/ -lhdf5 \
	-L$(lhpcdir)/lib/ -llhpc-aff \
	-L$(lapackdir) -llapack -lrefblas -lgfortran
# -fopenmp -lfftw_mpi -L$(arpackdir)/lib -lblas 


LINK = $(CXX) -o $@ ${LDFLAGS}
COMPILE = ${CXX} $(INCLUDE) -o $@ ${CXXFLAGS}
CUDA_COMPILE = ${NVCC} ${NVCCFLAGS} $(INCLUDE) -o $@ --compiler-options="${CXXFLAGS}"

MODULES = DML_crc32 dml getopt cvc_utils cvc_geometry mpi_init io io_utils propagator_io read_input_parser_cvc \
	  get_index gauge_io contractions_io ranlxd ranlxs Q_phi set_default \
	  Q_clover_phi gsp prepare_source matrix_init project make_x_orbits contract_cvc_tensor smearing_techniques \
	  prepare_propagator scalar_products clover rotations gitversion group_projection gamma dummy_solver contract_factorized \
	  contract_loop uwerr incomp_gamma derived_quantities
CUDA_MODULES = cuda_lattice

HEADERS = getopt cvc_complex cvc_geometry cvc_linalg iblas icontract cvc_utils default_input_values dml global io io_utils \
	  mpi_init propagator_io read_input_parser get_index gauge_io contractions_io \
	  ranlxd ranlxs Q_phi set_default laplace_linalg Q_clover_phi \
	  gsp prepare_source matrix_init project make_x_orbits contract_cvc_tensor smearing_techniques \
	  prepare_propagator scalar_products clover rotations group_projection \
          set_cubic_group_double_cover_elements set_cubic_group_double_cover_identification_table set_cubic_group_elements \
          set_cubic_group_elements_v2 gamma gamma_mult_table clebsch_gordan \
	  table_init_z table_init_d table_init_i table_init_c table_init_asym_z group_projection_applicator dummy_solver contract_factorized \
	  contract_loop uwerr incomp_gamma derived_quantities cuda_lattice


PROGRAM = hlbl_mII_contract_test
# PROGRAM = hlbl_mII_invert_contract



all: dep $(PROGRAM) 


# ##########

${srcdir}/read_input_parser_cvc.cpp: ${srcdir}/read_input_parser_cvc.l
	${LEX} -P cvc_ -i -t $< > ${srcdir}/read_input_parser_cvc.cpp

$(addsuffix .d,$(MODULES)): %.d: ${srcdir}/%.cpp
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

$(addsuffix .d,$(CUDA_MODULES)): %.d: ${srcdir}/%.cu
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

$(addsuffix .d,$(PROGRAM)): %.d: ${srcdir}/%.cpp
	 @ $(CCDEP) ${DEPFLAGS} ${INCLUDE} $< > $@

dep: $(addsuffix .d,$(MODULES) $(CUDA_MODULES) ${PROGRAM})

$(addsuffix .o,${MODULES}): %.o: ${srcdir}/%.cpp $(addprefix ${srcdir}/, $(addsuffix .h, ${HEADERS})) %.d
	${COMPILE} ${OPTARGS} -c $< 

$(addsuffix .o,${CUDA_MODULES}): %.o: ${srcdir}/%.cu $(addprefix ${srcdir}/, $(addsuffix .h, ${HEADERS})) %.d
	${CUDA_COMPILE} ${OPTARGS} -c $<

$(addsuffix .o,${PROGRAM}): %.o: ${srcdir}/%.cpp %.d
	${COMPILE} ${OPTARGS} -c $< 

${PROGRAM}: %: %.o ${srcdir}/gitversion.cpp $(addsuffix .o,${MODULES} ${CUDA_MODULES})
	${LINK}  $(addsuffix .o,${MODULES} ${CUDA_MODULES}) $@.o $(LIBS)

${srcdir}/gitversion.cpp: ${srcdir}/.git/HEAD ${srcdir}/.git/index
	echo "namespace cvc { const char *g_gitversion = \"$(shell cd ${srcdir} && git rev-parse HEAD && cd -)\"; }" > ${srcdir}/gitversion.cpp

# ##########


clean:
	rm -f *~ *.o *.d $(PROGRAM) ${srcdir}/gitversion.cpp

.PHONY: clean

# ##########
